package lyb.practice.creational.prototype;

/**
 * 项目名称：pattern
 * 功能说明: 原型模式
 *          使用场景：1、类初始化消耗资源较多
 *                    2、new 构造方法 产生对象需要繁琐的过程（数据准备及访问权限控制等）
 *                    3、构造函数比较复杂医院开的死亡证明
 *                    4、循环体中产生大量对象时，导致可读性下降
 *
 *           实质上就是快速构建对象的方法总结，采用简单工厂方式将getter,setter封装到某个方法中
 *           可采取的方式：
 *                    1、JDK 实现CloneAble接口，实现快速复制。采取在内存中二进制流拷贝，提高性能，但业务性可能存在风险
 *
 * clone方式深拷贝小结
 * ① 如果有一个非原生成员，如自定义对象的成员，那么就需要：
 *
 * 该成员实现Cloneable接口并覆盖clone()方法，不要忘记提升为public可见。
 * 同时，修改被复制类的clone()方法，增加成员的克隆逻辑。
 * ② 如果被复制对象不是直接继承Object，中间还有其它继承层次，每一层super类都需要实现Cloneable接口并覆盖clone()方法。
 *
 * 与对象成员不同，继承关系中的clone不需要被复制类的clone()做多余的工作。
 *
 * 一句话来说，如果实现完整的深拷贝，需要被复制对象的继承链、引用链上的每一个对象都实现克隆机制。
 * 创建日期：2019/7/23
 *
 * @Author: LYB
 */
public class ReadMe {


}
